<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="undefined2018/09/07/%E5%AE%9E%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
      <content type="html"><![CDATA[<p><img src="http://p4y9hsn68.bkt.clouddn.com/images.jpg" alt=""></p><h4 id="实习心得"><a href="#实习心得" class="headerlink" title="实习心得"></a>实习心得</h4><p>暑期为期两个多月的实习结束了，感谢<strong>东莞数汇大数据有限公司</strong>给我的一次可贵的机会。<br>在公司期间，学的最多的就是同事间每天的互相道早，同事关系融洽，工作氛围十分的nice。在公司前辈的带领和指导下，我完成了公司官网PC端前端界面和移动端界面的开发，做到了与UI，后端的紧密配合。对于UI设计师的设计图稿我会提出自己的想法，对于后端同事的数据接口我也能够很好的进行UI绑定和渲染数据。总之自己学到了很多。</p><p>最后，感谢经历。然后继续回到大四的学业中来，为接下来的实训、毕业设计、就业慢慢花心思吧~</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>惰性函数与函数柯里化</title>
      <link href="undefined2018/05/11/%E6%83%B0%E6%80%A7%E5%87%BD%E6%95%B0%E4%B8%8E%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
      <content type="html"><![CDATA[<p><img src="http://p4y9hsn68.bkt.clouddn.com/curry_images.png" alt="惰性函数与函数柯里化"></p><a id="more"></a><h3 id="惰性函数"><a href="#惰性函数" class="headerlink" title="惰性函数"></a>惰性函数</h3><p>就我自己对其的理解来说，<strong>惰性函数</strong>表示函数执行的分支只会在函数第一次掉用的时候执行，在第一次调用过程中，该函数会被覆盖为另一个按照合适方式执行的函数，这样任何对原函数的调用就不用再经过执行的分支了。</p><p>来一个例子了解下。在我们平时耍ajax时候，需要不断新建xhr对象，这时候就可以考虑使用惰性函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> createXHR = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> XMLHttpRequest !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        createXHR = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">//覆盖原有函数</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest(); </span><br><span class="line">    &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">//假设进行浏览器对应xhr对象查找</span></span><br><span class="line">          &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">              <span class="comment">//假设进行浏览器对应xhr对象查找</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> xhr;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>第一次执行函数会先各种查找对应浏览器支持的xhr然后返回该xhr，后面执行函数都直接返回一个新的浏览器对应支持的xhr对象，就不必每次都去根据浏览器判断xhr对象。</p><p>另一个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">type, el, fn</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line">         el.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">         addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">type, el, fn</span>) </span>&#123;</span><br><span class="line">             el.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent) &#123;</span><br><span class="line">         el.attachEvent(<span class="string">'on'</span> + type, fn);</span><br><span class="line">         addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">type, el, fn</span>) </span>&#123;</span><br><span class="line">             el.attachEvent(<span class="string">'on'</span> + type, fn);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们每当使用一次 <strong>addEvent</strong> 函数时都会进行一次判断。惰性函数帮我们解决这个问题。</p><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><p>维基百科上这样定义<strong>函数柯里化</strong>：</p><blockquote><p>在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p></blockquote><p>此处列出两种<strong>curry</strong>函数实现方式：</p><h4 id="实现一"><a href="#实现一" class="headerlink" title="实现一"></a>实现一</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) =&gt; </span>&#123;</span><br><span class="line"><span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> innerArgs = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"><span class="keyword">let</span> finalArgs = innerArgs.concat(args);</span><br><span class="line"><span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, finalArgs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a, b, c</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s1 = sub_curry(add, <span class="number">10</span>)(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = sub_curry(add)(<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = sub_curry(add, <span class="number">10</span>, <span class="number">1</span>)(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s1);</span><br><span class="line"><span class="built_in">console</span>.log(s2);</span><br><span class="line"><span class="built_in">console</span>.log(s3);</span><br></pre></td></tr></table></figure><h4 id="实现二"><a href="#实现二" class="headerlink" title="实现二"></a>实现二</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> curry = <span class="function"><span class="keyword">function</span>(<span class="params">fn, args</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> length = fn.length; <span class="comment">//length即为函数形参的个数</span></span><br><span class="line">    args = args || [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> _args = args.slice(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">let</span> arg, i;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">            arg = <span class="built_in">arguments</span>[i];</span><br><span class="line">            _args.push(arg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(_args.length &lt; length) &#123;</span><br><span class="line">            <span class="keyword">return</span> curry.call(<span class="keyword">this</span>, fn, _args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, _args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> con = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log([a, b, c]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s = curry(con);</span><br><span class="line">s(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">s(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>);</span><br><span class="line">s(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>柯里化可是将一个多参数的函数转换成多个单参数的函数，但是现在我们不仅可以传入一个参数，还可以一次传入两个参数，甚至更多参数.</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Vue组件通信模式</title>
      <link href="undefined2018/03/22/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p><img src="http://p4y9hsn68.bkt.clouddn.com/vue_component.png" alt="Vue组件通信模式"></p><a id="more"></a><p>前几天百度电面了我，问了一些vue框架的相关知识。可惜，学的太不全面了，有一些是问倒了我。组件间通信我重新学习了下，进行一个总结。（可能还不是很完善- -）</p><h3 id="Vue组件通信模式"><a href="#Vue组件通信模式" class="headerlink" title="Vue组件通信模式"></a>Vue组件通信模式</h3><h4 id="属性和事件"><a href="#属性和事件" class="headerlink" title="属性和事件"></a>属性和事件</h4><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p>属性允许你传递任意的数据类型到一个子组件中，并且允许你控制组件接收何种类型的数据。属性的更新也是响应式的，这使得无论任何时候，父组件的数据改变，子组件就会更新。<br>以下是<strong>父组件传值到子组件</strong>的例子：</p><ul><li>HTML代码：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"exp1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"parentmsg"</span>&gt;</span>&#123;&#123;parentmsg&#125;&#125;<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">:childmsg</span>=<span class="string">"parentmsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JS代码：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'child'</span>, &#123;</span><br><span class="line">template:<span class="string">`&lt;p&gt;&#123;&#123;childmsg&#125;&#125;&lt;/p&gt;`</span>,</span><br><span class="line">props: [<span class="string">'childmsg'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">"#exp1"</span>,</span><br><span class="line">data()&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">parentmsg: <span class="string">'1111'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><p>事件提供了一种子组件通知父组件做出改变的方式。<br>以下是<strong>子组件传值到父组件</strong>的例子：</p><ul><li>HTML代码：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"exp2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"msg in parentMsg"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-button</span> @<span class="attr">message</span>=<span class="string">"handleParentMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JS代码：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'child-button'</span>, &#123;</span><br><span class="line">   template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;input v-model="childmsg" /&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click="handleChildMsg"&gt;Send&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">   data() &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       childmsg: <span class="string">'1234'</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   methods: &#123;</span><br><span class="line">     handleChildMsg: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.$emit(<span class="string">'message'</span>, &#123; <span class="attr">message</span>: <span class="keyword">this</span>.childmsg &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#exp2"</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        parentMsg: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleParentMsg: <span class="function"><span class="keyword">function</span> (<span class="params">payLoad</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parentMsg.push(payLoad.message);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h4><p>创建一个全局事件总线来在任意位置传递事件。可用于非父子组件间的通信。参照<a href="https://alligator.io/vuejs/global-event-bus/" target="_blank" rel="noopener">此文章</a>。<br>先创建一个空的Vue实例作为总线。总线可单独放置在一个js文件独立开来。<br>如event-bus.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue’;</span></span><br><span class="line"><span class="string">export const EventBus = new Vue();</span></span><br></pre></td></tr></table></figure><p>创建PleaseClickMe.vue:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pleeease-click-me"</span> @<span class="attr">click</span>=<span class="string">"emitGlobalClickEvent()"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 导入创建的event-bus.js</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; EventBus &#125; <span class="keyword">from</span> <span class="string">'./event-bus.js'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      clickCount: 0</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    emitGlobalClickEvent() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.clickCount++;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 点击触发事件并传递载荷(the clickCount)</span></span></span><br><span class="line"><span class="javascript">      EventBus.$emit(<span class="string">'i-got-clicked'</span>, <span class="keyword">this</span>.clickCount);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再创建receive.vue:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventBus &#125; <span class="keyword">from</span> <span class="string">'./event-bus.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听i-got-clicked事件和接收传递过来的载荷</span></span><br><span class="line">EventBus.$on(<span class="string">'i-got-clicked'</span>, clickCount =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Oh, that's nice. It's gotten <span class="subst">$&#123;clickCount&#125;</span> clicks!`</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Provide-Inject"><a href="#Provide-Inject" class="headerlink" title="Provide / Inject"></a>Provide / Inject</h4><p><code>provide/inject</code>机制是Vue一个比较新的特性。它可以选择性的暴露祖先组件的数据或者方法到其所有的后代中。<br><code>provide</code> 选项应该是一个<strong>对象</strong>或<strong>返回一个对象的函数</strong>。<br><code>inject</code> 选项应该是一个<strong>字符串数组</strong>，或一个<strong>对象</strong>。</p><blockquote><p>这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。</p><ul><li>官方示例：</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">var</span> Provider = &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    foo: <span class="string">'bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  inject: [<span class="string">'foo'</span>],</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo) <span class="comment">// =&gt; "bar"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>sass学习日记</title>
      <link href="undefined2018/03/10/sass%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <content type="html"><![CDATA[<p><img src="http://p4y9hsn68.bkt.clouddn.com/header-typo-650x3001.png" alt="sass学习"></p><p>学习css预编译器sass。<br><a id="more"></a></p><p>CSS预处理器有好几种，less，sass，stylus等等。它们的优点是：语言级逻辑处理，有动态特性，可以改善项目结构。它们的基本思想是，<strong>用一种专门的编程语言，进行网页样式设计，然后再编译成正常的CSS文件</strong>。所以今天选择其中的一种sass来学习，其实其他的本质上没有太大区别。</p><h4 id="sass安装"><a href="#sass安装" class="headerlink" title="sass安装"></a>sass安装</h4><p>因为sass依赖于ruby环境，所以装sass之前先确认装了ruby。可以先去官网下载ruby（<a href="http://rubyinstaller.org/downloads" target="_blank" rel="noopener">http://rubyinstaller.org/downloads</a>）。<br>在安装的时候，勾选Add Ruby executables to your PATH这个选项，添加环境变量，不然以后使用编译软件的时候会提示找不到ruby环境。</p><p>安装完Ruby之后，在刚才我们安装的ruby中，打开Start Command Prompt with Ruby，然后输入下列命令行进行安装sass操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install sass</span><br></pre></td></tr></table></figure><p>查看是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass -v</span><br></pre></td></tr></table></figure><p>然后就可以使用了。</p><h4 id="使用sass"><a href="#使用sass" class="headerlink" title="使用sass"></a>使用sass</h4><p>网上教程有使用命令行的，我自己选择使用图形界面来进行操作，比较直观明了。下载<strong>Koala</strong>（<a href="http://koala-app.com/index-zh.html" target="_blank" rel="noopener">http://koala-app.com/index-zh.html</a>）。</p><blockquote><p><strong>koala</strong>是一个前端预处理器语言图形编译工具，支持Less、Sass、Compass、CoffeeScript，帮助web开发者更高效地使用它们进行开发。跨平台运行，完美兼容windows、linux、mac。</p></blockquote><p>每次做项目的时候，新建<strong>style</strong>文件夹，其中放置各种scss文件。然后最后将style文件夹通过Koala编译成许多普通的css文件然后集成到一个css上（如index.css）。接着在页面引入这个index.css就可以了。（按照我的理解进行的表述 - -）</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p>SASS允许使用变量，所有变量以<code>$</code>开头。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$blue</span> : <span class="number">#1875e7</span>;　</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">　　<span class="attribute">color</span> : <span class="variable">$blue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果变量需要镶嵌在字符串之中，就必须需要写在<code>#{}</code>之中。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$side</span> : left;</span><br><span class="line"><span class="selector-class">.rounded</span> &#123;</span><br><span class="line"><span class="attribute">border</span>-#&#123;<span class="variable">$side</span>&#125;-radius: <span class="number">5px</span>;</span><br><span class="line">&#125;<span class="comment">//结果：border-left-ridius</span></span><br></pre></td></tr></table></figure><h5 id="计算功能"><a href="#计算功能" class="headerlink" title="计算功能"></a>计算功能</h5><p>SASS允许在代码中使用<strong>算式</strong>。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">　　<span class="attribute">margin</span>: (<span class="number">14px</span>/<span class="number">2</span>);</span><br><span class="line">　　<span class="attribute">top</span>: <span class="number">50px</span> + <span class="number">100px</span>;</span><br><span class="line">　　<span class="attribute">right</span>: <span class="variable">$var</span> * <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h5><p>SASS允许<strong>选择器嵌套</strong>。这一点对我们编写样式是十分直观明了的。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">　　<span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以写成：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">　　<span class="selector-tag">h1</span> &#123;</span><br><span class="line">　　　<span class="attribute">color</span>:red;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性也可以嵌套，比如border-color属性，可以写成：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">　　<span class="attribute">border</span>: &#123;</span><br><span class="line">　　　　color: red;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，border后面必须加上<strong>冒号</strong>。<br>在嵌套的代码块内，可以使用<code>&amp;</code>引用父元素。比如a:hover伪类，可以写成：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">&amp;:hover &#123; <span class="attribute">color</span>: <span class="number">#ffb3ff</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>SASS共有两种注释风格。</p><blockquote><p>标准的CSS注释 /<em> comment </em>/ ，会保留到编译后的文件。<br>单行注释 // comment，只保留在SASS源文件中，编译后被省略。<br>在/<em>后面加一个感叹号，表示这是”重要注释”。即使是压缩模式编译，也会保留这行注释，通常可以用于声明版权信息。<br>　　/</em>!<br>　　　　重要注释！<br>　　*/</p></blockquote><h4 id="代码的重用"><a href="#代码的重用" class="headerlink" title="代码的重用"></a>代码的重用</h4><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>SASS允许一个选择器，继承另一个选择器。比如，现有class1：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class1</span> &#123;</span><br><span class="line">　　　　<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>class2要继承class1，就要使用<strong>@extend</strong>命令：　　</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">　　　　@<span class="keyword">extend</span> .class1;</span><br><span class="line">　　　　<span class="attribute">font-size</span>:<span class="number">120%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h5><p>Mixin有点像C语言的宏（macro），是可以重用的代码块。<br>使用<strong>@mixin</strong>命令，定义一个代码块。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> left &#123;</span><br><span class="line">　　　　<span class="attribute">float</span>: left;</span><br><span class="line">　　　　<span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<strong>@include</strong>命令，调用这个mixin。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">　　　　@<span class="keyword">include</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mixin的强大之处，在于可以<strong>指定参数</strong>和<strong>缺省值</strong>。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> left(<span class="variable">$value</span>: 10px) &#123;</span><br><span class="line">　　　　<span class="attribute">float</span>: left;</span><br><span class="line">　　　　<span class="attribute">margin-right</span>: <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候，根据需要加入参数：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">　　　　@<span class="keyword">include</span> left(<span class="number">20px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个mixin的实例，用来生成浏览器前缀。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> rounded(<span class="variable">$vert</span>, <span class="variable">$horz</span>, <span class="variable">$radius</span>: 10px) &#123;</span><br><span class="line">　　　　<span class="attribute">border</span>-#&#123;<span class="variable">$vert</span>&#125;-#&#123;<span class="variable">$horz</span>&#125;-radius: <span class="variable">$radius</span>;</span><br><span class="line">　　　　-moz-<span class="attribute">border-radius</span>-#&#123;<span class="variable">$vert</span>&#125;#&#123;<span class="variable">$horz</span>&#125;: <span class="variable">$radius</span>;</span><br><span class="line">　　　　-webkit-<span class="attribute">border</span>-#&#123;<span class="variable">$vert</span>&#125;-#&#123;<span class="variable">$horz</span>&#125;-radius: <span class="variable">$radius</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候，可以像下面这样调用：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#navbar</span> <span class="selector-tag">li</span> &#123; @<span class="keyword">include</span> rounded(top, left); &#125;</span><br><span class="line"><span class="selector-id">#footer</span> &#123; @<span class="keyword">include</span> rounded(top, left, 5px); &#125;</span><br></pre></td></tr></table></figure><h5 id="颜色函数"><a href="#颜色函数" class="headerlink" title="颜色函数"></a>颜色函数</h5><p>SASS提供了一些内置的颜色函数，以便生成系列颜色。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lighten(<span class="selector-id">#cc3</span>, 10%) <span class="comment">// #d6d65c</span></span><br><span class="line">darken(<span class="selector-id">#cc3</span>, 10%) <span class="comment">// #a3a329</span></span><br><span class="line">grayscale(<span class="selector-id">#cc3</span>) <span class="comment">// #808080</span></span><br><span class="line">complement(<span class="selector-id">#cc3</span>) <span class="comment">// #33c</span></span><br></pre></td></tr></table></figure><h5 id="插入文件"><a href="#插入文件" class="headerlink" title="插入文件"></a>插入文件</h5><p>@import命令，用来插入外部文件。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"path/filename.scss"</span>;</span><br></pre></td></tr></table></figure><p>如果插入的是.css文件，则等同于css的import命令。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"foo.css"</span>;</span><br></pre></td></tr></table></figure><h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h4><h5 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h5><p>SASS允许用户编写自己的函数。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@function double(<span class="variable">$n</span>) &#123;</span><br><span class="line">　　@return <span class="variable">$n</span> * 2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">　　<span class="attribute">width</span>: double(<span class="number">5px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这也是很方便的一点。当时在做vue仿饿了么的时候就用到了<strong>stylus</strong>中相同的特性，通过传递不同参数，生成不同样式，进而使得代码量不冗余。</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>读《三体》有感</title>
      <link href="undefined2018/03/09/%E8%AF%BB%E3%80%8A%E4%B8%89%E4%BD%93%E3%80%8B%E6%9C%89%E6%84%9F/"/>
      <content type="html"><![CDATA[<p><img src="http://p4y9hsn68.bkt.clouddn.com/20160605204647wLq3yatCBc01T8sA.webp" alt="三体"><br><a id="more"></a></p><blockquote><p>《<strong>三体</strong>》是中国大陆作家<strong>刘慈欣</strong>于2006年5月至12月在《科幻世界》杂志上连载的一部长篇科幻小说，出版后成为中国大陆最畅销的科幻长篇小说之一[1]。2008年，该书的单行本由重庆出版社出版。本书是三体系列（系列原名为：地球往事三部曲）的第一部，该系列的第二部《三体II：黑暗森林》已经于2008年5月出版。2010年11月，第三部《三体III：死神永生》出版发行。 2011年，“地球往事三部曲”在台湾陆续出版。小说的英文版获得美国科幻奇幻作家协会2014年度“星云奖”提名[2]，并荣获2015年雨果奖最佳小说奖。</p></blockquote><p>这是<em>维基百科</em> 对《三体》及其作者的基本介绍。</p><p>半个月前，心血来潮开始看《三体》。总计花了近24个小时，终于看完这部科幻著作。小说分为三章，分别是《三体》、《三体Ⅱ·黑暗森林》、《三体Ⅲ·死神永生》。国内科幻小说能到达这样一个程度实属可贵，故事很长但是没有冗余之处，一环扣一环，而且总能在适当之处通过紧张的环节或是描写来刺激读者的神经。故事主线从现代开始，然后通过人物与情节不断发展，慢慢展现了这部小说的灵魂。从文化大革命再到神奇的三体世界，从一颗渺小的质子再到无限的宇宙，这部小说带给读者的不只是物理定律和知识的美妙，同时也为我们奉上想象力不能触及的宇宙世界万物这饕餮大餐。书中人物栩栩如生，在我脑海中挥散不去，像是救世主“罗辑”自己捏造出来的情人一般，虽然虚假，但也被赋予了生命。<br>小说建立在大量现有基础科学水平上的无限遐想与延伸，时间线不停变化于古今中外。个人觉得第二部黑暗森林最为出彩。“黑暗森林”法则，实在精妙，“毁灭一个文明比观测一个文明容易得多”，地球就像在篝火旁的小孩子，对着四周的黑暗大喊“我在这里”，于是，灭顶之灾。小说最终以太阳系银河系乃至宇宙覆灭为结局，最后看完只有震撼和对作者脑洞的佩服。<br>文笔不好，只能写这么多，对于这样一部好书，我不想读完就完，可以留下点什么呢，就是一篇用心写的读后感了。</p>]]></content>
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mongo学习笔记（四）</title>
      <link href="undefined2018/03/07/mongo%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <content type="html"><![CDATA[<p><img src="http://p4y9hsn68.bkt.clouddn.com/maxresdefault.jpg" alt="mongoDB索引和管理"></p><p>学习mongoDB的索引和管理。<br><a id="more"></a></p><p>今天学习了MongoDB的索引操作还有对数据库的管理。</p><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>无论是在关系型数据库还是文档数据库，建立索引都是非常重要的。不过建立索引是要消耗硬盘和内存资源的，所以要根据程序需要进行建立。MongoDB也给我们进行了限制，只允许我们建立64个索引值。</p><h5 id="建立索引"><a href="#建立索引" class="headerlink" title="建立索引"></a>建立索引</h5><p>建立索引只需要一句话<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合.ensureIndex(&#123;字段:1&#125;)  //字段为1表明为其建立索引</span><br></pre></td></tr></table></figure></p><h5 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合.getIndexes()</span><br></pre></td></tr></table></figure><h5 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h5><p>有些时候需要在大篇幅的文章中搜索关键词，这时候想搜索关键字是非常不容易的，索引MongoDB为我们提供了<strong>全文索引</strong>。</p><p>先在<code>info</code>集合中插入两条数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.info.insert(&#123;<span class="attr">contentText</span>:<span class="string">"I am a slow walker,but I never walk backwards."</span>&#125;)</span><br><span class="line">db.info.insert(&#123;<span class="attr">contentText</span>:<span class="string">"Your happy passer-by all knows, my distressed there is no place hides."</span>&#125;)</span><br></pre></td></tr></table></figure><p>接着为其创建全文索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.info.ensureIndex(&#123;<span class="attr">contentText</span>:<span class="string">"text"</span>&#125;)</span><br><span class="line"><span class="comment">//使用"text"表示使用全文索引</span></span><br></pre></td></tr></table></figure><p>创建完成之后就可以使用索引进行内容查找了，如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.info.find(&#123;<span class="attr">$text</span>:&#123;<span class="attr">$search</span>:<span class="string">"slow"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>其中<code>$text</code>则代表使用全文索引进行查找，<code>$search</code>为需要查找的内容。<br>如果想要同时进行多个关键词的查找，则可以在<code>$search</code>中加入新关键词同时以空格符隔开。如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.info.find(&#123;<span class="attr">$text</span>:&#123;<span class="attr">$search</span>:<span class="string">"slow hides"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>还可以使用减号“-”来取消某个关键词</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.info.find(&#123;<span class="attr">$text</span>:&#123;<span class="attr">$search</span>:<span class="string">"slow -hides"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>全文搜索中是支持转义符的，比如我们想搜索的是两个词<code>walk backwards</code>和<code>hides</code>，这时候需要使用<code>\</code>斜杠来转义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.info.find(&#123;<span class="attr">$text</span>:&#123;<span class="attr">$search</span>:<span class="string">"\"walk backwards\" hides"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h4><h5 id="用户的创建与修改"><a href="#用户的创建与修改" class="headerlink" title="用户的创建与修改"></a>用户的创建与修改</h5><blockquote><p>安装好MongoDB时，它为我们默认开了一个最高管理权限方便我们管理数据库，我们可以用mongo链接数据库，就是这个原理。但在实际开发中并一般不能使用这个用户，因为大家都知道和最高权限的原因，安全性和可靠性都不适合，所以要对MongoDB的用户进行管理。</p></blockquote><p>因此，MongoDB为我们提供了“建权”操作，即<strong>建立权限</strong>。</p><p>首先执行以下mongo命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br></pre></td></tr></table></figure><p>我们可以自己创建一个新用户而不是使用mongo。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123;</span><br><span class="line">    user: <span class="string">'tobee'</span>,</span><br><span class="line">    pwd: <span class="string">'123456'</span>,</span><br><span class="line">    customData: &#123;</span><br><span class="line">        name: <span class="string">'tobee'</span>,</span><br><span class="line">        age: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    roles: [</span><br><span class="line">        &#123;</span><br><span class="line">            role: <span class="string">'readWrite'</span>,</span><br><span class="line">            db: <span class="string">'company'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'read'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>roles</code>为权限设定。此处除了company数据库的权限单独设置为读写readWrite外，其余对全部数据库设为只读read。<br>新建完成之后，我们看一下该用户是否创建成功。使用以下命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.system.users.find()</span><br></pre></td></tr></table></figure><p>接着断开MongoDB服务器，以建权方式重新打开服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --auth</span><br></pre></td></tr></table></figure></p><p>此时就不能直接使用mongo连接数据库了。而是需要用户名和密码登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo -u tobee -p 123456 127.0.0.1:17027/admin</span><br></pre></td></tr></table></figure><p><code>-u</code>选项为用户名，<code>-p</code>为密码，之后的为电脑IP和MongoDB占用的端口号(17027)和所需进入的数据库(admin)。<br>此时便可以使用自己的其他用户名与远程mongo服务器进行链接了。<br>以下代码可以验证用户名与密码是否一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.auth(<span class="string">"tobee"</span>,<span class="string">"123456"</span>)</span><br><span class="line"><span class="comment">//如果正确返回1，如果错误返回0。（Error：Authentication failed。）</span></span><br></pre></td></tr></table></figure><h5 id="备份和还原"><a href="#备份和还原" class="headerlink" title="备份和还原"></a>备份和还原</h5><p>MongoDB的备份：<strong>mongodump</strong>。以下都是该命令的参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mongodump</span><br><span class="line">    --host 127.0.0.1</span><br><span class="line">    --port 27017</span><br><span class="line">    --out D:/databack/backup</span><br><span class="line">    --collection myCollections</span><br><span class="line">    --db <span class="built_in">test</span></span><br><span class="line">    --username username</span><br><span class="line">    --password password</span><br></pre></td></tr></table></figure></p><p><code>--host</code>为IP地址，<code>--port</code>为端口号，<code>--out</code>可将备份保存到<code>D:/databack/backup</code>目录下。</p><p>比如现在我们备份所有MongoDB里的库到D盘的databack文件夹下，就可以把命令写成这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodump --host 127.0.0.1 --port 27017 --out D:/databack/</span><br></pre></td></tr></table></figure><p>MongoDB的恢复：<strong>mongostore</strong>。以下都是该命令的参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mongorestore</span><br><span class="line">    --host 127.0.0.1</span><br><span class="line">    --port 27017</span><br><span class="line">    --username username</span><br><span class="line">    --password password</span><br><span class="line">    &lt;path to the backup&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;path to the backup&gt;</code>为当时保存备份的目录。</p><p>当某个已备份的集合不小心删除之后，可以使用还原语句恢复。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore --host 127.0.0.1 --port 27017 D:/databack/</span><br></pre></td></tr></table></figure><p>毕竟没有实际项目可以练练手，所以我也只能多看些教程和敲敲基本的代码了。keep learning~</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Vuex学习日记</title>
      <link href="undefined2018/03/05/Vuex%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <content type="html"><![CDATA[<p><img src="http://p4y9hsn68.bkt.clouddn.com/55.jpg" alt="vuex状态管理"></p><p>学习vue全家桶中的状态管理工具 —— Vuex<br><a id="more"></a></p><p>挺久之前就开始学习<strong>vue</strong>了，<strong>vue</strong>全家桶中的<strong>vuex</strong>也有稍微了解，但是那个时候还没有对其进行更熟悉的了解吧，今天就重新认真学习了下。</p><p>看看官方对<strong>Vuex</strong>的解释，</p><blockquote><p><strong>Vuex</strong> 是一个专为 <strong>Vue.js</strong> 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p></blockquote><p>在学习之后，个人对其也有了自己的理解，我觉得可以理解为在data中的属性需要共享给其他vue组件使用的部分。简单的说就是data中需要共用的属性。比如做一个购物车，那么购物车的内容就需要在不同页面中进行保留和传递，这时候就可以使用Vuex对其进行集中管理。在此之前，我们都是用父子组件互相传值来完成的。</p><p>在官方文档中，会学到 Vue 的一些核心概念，深入理解所有的概念对于使用 Vuex 来说是必要的。<br>接下来我自己通过一个小案例来弄清楚这些核心概念，当做一个总结了。</p><h4 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h4><p>第一步先通过<strong>vue-cli</strong>脚手架工具搭建起vue项目运行的环境，这里就不多说了。<br>接着通过npm安装vuex。本人用的是VScode，所以自带了终端，直接<code>ctrl+`</code>打开终端，输入下面命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><p><strong>vuex</strong>在开发过程需要用到，所以必须加上<code>--save</code>选项。</p><p>接着新建store.js文件，将vue和vuex导入，并且使用vuex。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br></pre></td></tr></table></figure><p>接着创建一个仓库state（我自己的理解 - -），再放入一个变量count。（做一个小计数器）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//state理解为存放共享状态的仓库</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将内容导出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><p>在component文件夹下创建Count.vue模板文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;&lt;hr/&gt;</span><br><span class="line">        &lt;h3&gt;&#123;&#123;$store.state.count&#125;&#125; --- &#123;&#123;count&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import store from &apos;../vuex/store.js&apos;;</span><br><span class="line">    //解构赋值得到mapState</span><br><span class="line">    import &#123; mapState &#125; from &apos;vuex&apos;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                msg: &apos;Hello Vuex&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        //利用mapState方法可以简化拼写，如$store.state.count简化为count</span><br><span class="line">        //最容易理解的写法为：</span><br><span class="line">        // computed: &#123;</span><br><span class="line">        //     count() &#123;</span><br><span class="line">        //         return this.$store.state.count;</span><br><span class="line">        //     &#125;</span><br><span class="line">        // &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            ...mapState([&apos;count&apos;])</span><br><span class="line">        &#125;,</span><br><span class="line">        store</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;&quot;&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>一开始就需要<strong>引入并注册store</strong>，这点很重要。<br>其中利用<strong>mapState</strong>辅助函数帮助我们生成计算属性。如上HTML代码中的<code>$store.state.count</code>可以通过mapState直接简化为count。只需从vuex中解构赋值得到mapState，再在computed中做映射。由于mapState 函数返回的是一个对象，所以可以通过ES6新增的对象展开运算符<code>...</code>将它与局部计算属性混合使用。</p><h4 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h4><p>接下来为计数器增加两个按钮，一加一减。Count.vue中的HTML代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;&lt;hr/&gt;</span><br><span class="line">        &lt;h3&gt;&#123;&#123;$store.state.count&#125;&#125; --- &#123;&#123;count&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;!--新增--&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;button @click=&quot;$store.commit(&apos;add&apos;,5)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">            &lt;button @click=&quot;$store.commit(&apos;reduce&apos;)&quot;&gt;-&lt;/button&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;!--新增--&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>上面增加了两个方法add和reduce，接下来在store.js中分别实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mutations用于改变state中的状态值</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    add(state, n) &#123;</span><br><span class="line">        state.count += n;</span><br><span class="line">    &#125;,<span class="comment">//可传第二个参数</span></span><br><span class="line">    reduce(state) &#123;</span><br><span class="line">        state.count--</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里使用<strong>mutations</strong>。更改 Vuex 的 <strong>store</strong> 中的状态的唯一方法是提交 <strong>mutation</strong>，即上面可见的，需要调用<code>$store.commit()</code>方法。参数则为函数。同时也要像前面state一样，导出mutations。</p><p>如果我们希望直接通过<code>@click=&#39;add()&#39;</code>这样就可以直接调用方法，而不需要利用$store.commit()时，我们可以使用mapMutations。<br>在Count.vue中，同理先从vuex中解构赋值得到<strong>mapMutations</strong>，然后在methods中进行方法的映射：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将this.add()和this.reduce()分别映射为this.$store.commit('add')和this.$store.commit('reduce')</span></span><br><span class="line">        methods: mapMutations([<span class="string">'add'</span>, <span class="string">'reduce'</span>]),</span><br></pre></td></tr></table></figure><p>此时，在Count.vue中我们便可以直接调用函数，跟没引用vuex插件一样。</p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"reduce"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h4><p>接着是<strong>getters</strong>。getters从表面是获得的意思，可以把他看作在获取数据之前进行的一种再编辑,相当于对数据的一个过滤和加工。你可以把它看作store.js的计算属性。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><p>在store.js做如下操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getters用于计算过滤</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    count: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.count += <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时导出getters。<br>接着先从vuex中解构赋值得到<strong>mapGetters</strong>，然后computed中，同理使用扩展运算符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">...mapGetters([<span class="string">'count'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时跟普通Vue实例中的computed一样，当需要被计算的值发送变化时，计算属性先做出变化，改变当前的值。</p><p>在学习的过程中还有两个概念——<strong>action</strong>和<strong>module</strong>。</p><blockquote><p><strong>action</strong> : actions和之前讲的mutations功能基本一样，不同点是，actions是异步的改变state状态，而mutations是同步改变状态。</p><p><strong>module</strong> : 状态管理器的模块组操作。随着项目的复杂性增加，我们共享的状态越来越多，这时候我们就需要把我们状态的各种操作进行一个分组，分组后再进行按组编写。</p></blockquote><p>这里有空的话会再去看<a href="https://vuex.vuejs.org/zh-cn/actions.html" target="_blank" rel="noopener">官方文档</a>或者<a href="http://jspang.com/2017/05/03/vuex/" target="_blank" rel="noopener">技术胖的博客</a>，进行一个更系统的学习。</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>关于学习微信小程序的一些记录</title>
      <link href="undefined2018/03/02/%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"/>
      <content type="html"><![CDATA[<p><img src="http://p4y9hsn68.bkt.clouddn.com/xQp0S1D7ZTaUFoFy9hwS.jpg" alt="小程序心得记录"></p><p>关于微信小程序自己的一些学习历程记录一下吧。<br><a id="more"></a></p><p>上个学期，经过一个朋友介绍，我有幸参加了学校“挑战杯”其中一个小组的项目，负责该项目的微信小程序部分。那时候我一点都不了解小程序，通过自己慢慢学习摸索，帮助该团队完成了这个项目1.0版本的小程序端后，退出该项目团队。接下来就我个人的学习经历什么的随便写写，算是一种记录。<br>该项目是制作一个健身器材。就我个人而言，我知道健身有在健身房进行大汗淋漓的健身，也有在体侧房进行测量性质之类的健身，我们的项目就是属于后者，制作一个能测量出被测量者的各方面力量。当时硬件方面已经成熟，上位机就绪，可以在机器上进行实验。后台小组以及我负责的小程序都是后来加入的。<br>说回小程序，此处应有图，不过这个项目将来要上市的（团队负责人很有生意头脑），所以意思意思就好。以下的图是在小程序开发助手和web开发者工具看的。<br><img src="http://p4y9hsn68.bkt.clouddn.com/1520004377%281%29.jpg" width="200" align="center"><br><img src="http://p4y9hsn68.bkt.clouddn.com/833725438012060717.jpg" width="200" align="center"></p><h3 id="关于登录"><a href="#关于登录" class="headerlink" title="关于登录"></a>关于登录</h3><p>来说说小程序的登录。<br>引用小程序官方文档的登录时序图，整个登录流程基本如下图所示：<br><img src="http://p4y9hsn68.bkt.clouddn.com/login.png" alt="小程序登录时序图"><br>该图中，<code>小程序</code>指的就是我们使用小程序框架写的代码部分，<code>第三方服务器</code>一般就是我们自己的后台服务程序，<code>微信服务器</code>是微信官方的API服务器。</p><h4 id="在客户端获取当前登录微信用户的登录凭证-code"><a href="#在客户端获取当前登录微信用户的登录凭证-code" class="headerlink" title="在客户端获取当前登录微信用户的登录凭证(code)"></a>在客户端获取当前登录微信用户的<code>登录凭证(code)</code></h4><p>我们可以使用wx.login()方法得到一个登录凭证，获取该凭证是小程序登录的第一步。</p><p>接着可以在小程序的App代码中发起登录凭证请求，也可以在其他任何Page页面代码中发起登录凭证请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.login(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> code = res.code;</span><br><span class="line">        <span class="keyword">if</span> (code) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'获取用户登录凭证：'</span> + code);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'获取用户登录态失败：'</span> + res.errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="获取唯一标识-openid-和会话密钥-session-key"><a href="#获取唯一标识-openid-和会话密钥-session-key" class="headerlink" title="获取唯一标识(openid)和会话密钥(session_key)"></a>获取<code>唯一标识(openid)</code>和<code>会话密钥(session_key)</code></h4><p>使用wx.request()方法，请求后台的API，并将登录凭证(code)传递过去。例如在我们前面代码的基础上增加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    wx.login(&#123;</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> code = res.code;</span><br><span class="line">        <span class="keyword">if</span> (code) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'获取用户登录凭证：'</span> + code);</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------- 发送凭证 ------------------</span></span><br><span class="line">wx.request(&#123;</span><br><span class="line">  url: <span class="string">'https://www.yourAPI.com/user'</span>,</span><br><span class="line">  data: &#123; <span class="attr">code</span>: code &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ------------------------------------</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'获取用户登录态失败：'</span> + res.errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>你的后台服务(/user)接着需要使用这个传递过来的登录凭证，去调用微信接口换取openid和session_key，接口地址格式如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//api.weixin.qq.com/sns/jscode2session?`appid=APPID`&amp;`secret=SECRET`&amp;`js_code=JSCODE`&amp;grant_type=authorization_code</span></span><br></pre></td></tr></table></figure><p>其中<code>APPID</code>和<code>SECRET</code>则是申请小程序时候就给出的，可以去小程序后台管理界面查看，JSCODE则是小程序端传递过来的登录凭证<code>code</code>。</p><p>后台代码这里不是我负责，所以没有贴出。不过其实大同小异。</p><p>你自己的后台代码如果成功执行的话，就可以得到<code>openid</code>和<code>session_key</code>。这个信息就是当前微信账户在微信服务器那边的登录态了。<br>至此登录部分就完成了。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>之后就是一些图片上传啊，UI的设计啥的，这些去微信小程序官方文档都能找得到。UI则采用了WeUI（<a href="https://weui.io/" target="_blank" rel="noopener">https://weui.io/</a>）。小程序也采用了数据驱动的方式操作文档，这是很棒的，跟现有的流行框架，如VUE，Angular一样，同时也支持ES6语法。</p><p>总之，这个项目让我体验到前后台合作开发的流程，算是有收获。继续学习下去吧。</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mongo学习笔记（三）</title>
      <link href="undefined2018/02/23/mongo%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <content type="html"><![CDATA[<p><img src="http://p4y9hsn68.bkt.clouddn.com/MW-FU909_mongod_20170922140731_ZH.jpg" alt="学习mongoDB查询操作"></p><p>学习mongoDB的查询(find)操作。<br><a id="more"></a></p><p>今天照着<a href="http://jspang.com/2017/12/16/mongdb/#08update" target="_blank" rel="noopener">技术胖的博客</a>继续学习了mongoDB的查询操作。</p><p>首先先把例子前提搭好：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> workmate1 = &#123;</span><br><span class="line">    name: <span class="string">'JSPang'</span>,</span><br><span class="line">    age: <span class="number">33</span>,</span><br><span class="line">    sex: <span class="number">1</span>,</span><br><span class="line">    job: <span class="string">'前端'</span>,</span><br><span class="line">    skill: &#123;</span><br><span class="line">        skillOne: <span class="string">'HTML+CSS'</span>,</span><br><span class="line">        skillTwo: <span class="string">'JavaScript'</span>,</span><br><span class="line">        skillThree: <span class="string">'PHP'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    regeditTime: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    interest: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> workmate2 = &#123;</span><br><span class="line">    name: <span class="string">'ShengLei'</span>,</span><br><span class="line">    age: <span class="number">31</span>,</span><br><span class="line">    sex: <span class="number">1</span>,</span><br><span class="line">    job: <span class="string">'JAVA后端'</span>,</span><br><span class="line">    skill: &#123;</span><br><span class="line">        skillOne: <span class="string">'HTML+CSS'</span>,</span><br><span class="line">        skillTwo: <span class="string">'J2EE'</span>,</span><br><span class="line">        skillThree: <span class="string">'PPT'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    regeditTime: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    interest: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> workmate3 = &#123;</span><br><span class="line">    name: <span class="string">'MinJie'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    sex: <span class="number">0</span>,</span><br><span class="line">    job: <span class="string">'UI'</span>,</span><br><span class="line">    skill: &#123;</span><br><span class="line">        skillOne: <span class="string">'PhotoShop'</span>,</span><br><span class="line">        skillTwo: <span class="string">'UI'</span>,</span><br><span class="line">        skillThree: <span class="string">'PPT'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    regeditTime: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    interest: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> workmate4 = &#123;</span><br><span class="line">    name: <span class="string">'XiaoWang'</span>,</span><br><span class="line">    age: <span class="number">25</span>,</span><br><span class="line">    sex: <span class="number">1</span>,</span><br><span class="line">    job: <span class="string">'UI'</span>,</span><br><span class="line">    skill: &#123;</span><br><span class="line">        skillOne: <span class="string">'PhotoShop'</span>,</span><br><span class="line">        skillTwo: <span class="string">'UI'</span>,</span><br><span class="line">        skillThree: <span class="string">'PPT'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    regeditTime: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    interest: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> workmate5 = &#123;</span><br><span class="line">    name: <span class="string">'LiangPeng'</span>,</span><br><span class="line">    age: <span class="number">28</span>,</span><br><span class="line">    sex: <span class="number">1</span>,</span><br><span class="line">    job: <span class="string">'前端'</span>,</span><br><span class="line">    skill: &#123;</span><br><span class="line">        skillOne: <span class="string">'HTML+CSS'</span>,</span><br><span class="line">        skillTwo: <span class="string">'JavaScript'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    regeditTime: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    interest: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> workmate6 = &#123;</span><br><span class="line">    name: <span class="string">'HouFei'</span>,</span><br><span class="line">    age: <span class="number">25</span>,</span><br><span class="line">    sex: <span class="number">0</span>,</span><br><span class="line">    job: <span class="string">'前端'</span>,</span><br><span class="line">    skill: &#123;</span><br><span class="line">        skillOne: <span class="string">'HTML+CSS'</span>,</span><br><span class="line">        skillTwo: <span class="string">'JavaScript'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    regeditTime: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    interest: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> workmate7 = &#123;</span><br><span class="line">    name: <span class="string">'LiuYan'</span>,</span><br><span class="line">    age: <span class="number">35</span>,</span><br><span class="line">    sex: <span class="number">0</span>,</span><br><span class="line">    job: <span class="string">'美工'</span>,</span><br><span class="line">    skill: &#123;</span><br><span class="line">        skillOne: <span class="string">'PhotoShop'</span>,</span><br><span class="line">        skillTwo: <span class="string">'CAD'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    regeditTime: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    interest: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> workmate8 = &#123;</span><br><span class="line">    name: <span class="string">'DingLu'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    sex: <span class="number">0</span>,</span><br><span class="line">    job: <span class="string">'美工'</span>,</span><br><span class="line">    skill: &#123;</span><br><span class="line">        skillOne: <span class="string">'PhotoShop'</span>,</span><br><span class="line">        skillTwo: <span class="string">'CAD'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    regeditTime: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    interest: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> workmate9 = &#123;</span><br><span class="line">    name: <span class="string">'JiaPeng'</span>,</span><br><span class="line">    age: <span class="number">29</span>,</span><br><span class="line">    sex: <span class="number">1</span>,</span><br><span class="line">    job: <span class="string">'前端'</span>,</span><br><span class="line">    skill: &#123;</span><br><span class="line">        skillOne: <span class="string">'HTML+CSS'</span>,</span><br><span class="line">        skillTwo: <span class="string">'JavaScript'</span>,</span><br><span class="line">        skillThree: <span class="string">'PHP'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    regeditTime: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    interest: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> workmate10 = &#123;</span><br><span class="line">    name: <span class="string">'LiJia'</span>,</span><br><span class="line">    age: <span class="number">26</span>,</span><br><span class="line">    sex: <span class="number">0</span>,</span><br><span class="line">    job: <span class="string">'前端'</span>,</span><br><span class="line">    skill: &#123;</span><br><span class="line">        skillOne: <span class="string">'HTML+CSS'</span>,</span><br><span class="line">        skillTwo: <span class="string">'JavaScript'</span>,</span><br><span class="line">        skillThree: <span class="string">'PHP'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    regeditTime: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    interest: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> db = connect(<span class="string">'company'</span>);</span><br><span class="line"><span class="keyword">var</span> workmateArray = [workmate1, workmate2, workmate3, workmate4, workmate5, workmate6, workmate7, workmate8, workmate9, workmate10];</span><br><span class="line">db.workmate.insert(workmateArray);</span><br><span class="line">print(<span class="string">'[SUCCESS]：The data was inserted successfully'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="简单查找"><a href="#简单查找" class="headerlink" title="简单查找"></a>简单查找</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单查找</span></span><br><span class="line">db.workmate.find();</span><br><span class="line"><span class="comment">//根据条件查找</span></span><br><span class="line">db.workmate.find(&#123; <span class="string">"skill.skillOne"</span>: <span class="string">"HTML+CSS"</span> &#125;, &#123; <span class="attr">name</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><h4 id="不等修饰符"><a href="#不等修饰符" class="headerlink" title="不等修饰符"></a>不等修饰符</h4><blockquote><p>小于(<strong>$lt</strong>):英文全称 less-than</p><p>小于等于(<strong>$lte</strong>)：英文全称 less-than-equal</p><p>大于(<strong>$gt</strong>):英文全称 greater-than</p><p>大于等于(<strong>$gte</strong>):英文全称 greater-than-equal</p><p>不等于(<strong>$ne</strong>):英文全称 not-equal</p></blockquote><p>可以根据不等修饰符进行查询。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找年龄小于30大于25岁的人</span></span><br><span class="line">db.workmate.find(</span><br><span class="line">    &#123; <span class="attr">age</span>: &#123; <span class="attr">$lte</span>: <span class="number">30</span>, <span class="attr">$gte</span>: <span class="number">25</span> &#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="literal">true</span>, <span class="attr">age</span>: <span class="literal">true</span>, <span class="string">"skill.skillOne"</span>: <span class="literal">true</span>, <span class="attr">_id</span>: <span class="literal">false</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="in修饰符"><a href="#in修饰符" class="headerlink" title="$in修饰符"></a>$in修饰符</h4><p>可以进行一个键多个值的查询。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找年龄为25和33的人</span></span><br><span class="line">db.workmate.find(</span><br><span class="line">    &#123; <span class="attr">age</span>: &#123; <span class="attr">$in</span>: [<span class="number">25</span>, <span class="number">33</span>] &#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="number">1</span>, <span class="attr">_id</span>: <span class="number">0</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="or修饰符"><a href="#or修饰符" class="headerlink" title="$or修饰符"></a>$or修饰符</h4><p>同时进行多个键值的查询。或逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找年龄大于30或第三项技能为PHP的人</span></span><br><span class="line">db.workmate.find(</span><br><span class="line">    &#123;</span><br><span class="line">        $or: [</span><br><span class="line">            &#123; <span class="attr">age</span>: &#123; <span class="attr">$gte</span>: <span class="number">30</span> &#125; &#125;,</span><br><span class="line">            &#123; <span class="string">"skill.skillThree"</span>: <span class="string">"PHP"</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="number">1</span>, <span class="attr">age</span>: <span class="number">1</span>, <span class="string">"skill.skillThree"</span>: <span class="number">1</span>, <span class="attr">_id</span>: <span class="number">0</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="and修饰符"><a href="#and修饰符" class="headerlink" title="$and修饰符"></a>$and修饰符</h4><p>同时进行多个键值的查询。与逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找年龄大于30并且第三项技能为PHP的人</span></span><br><span class="line">db.workmate.find(</span><br><span class="line">    &#123;</span><br><span class="line">        $and: [</span><br><span class="line">            &#123; <span class="attr">age</span>: &#123; <span class="attr">$gte</span>: <span class="number">30</span> &#125; &#125;,</span><br><span class="line">            &#123; <span class="string">"skill.skillThree"</span>: <span class="string">"PHP"</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="number">1</span>, <span class="attr">age</span>: <span class="number">1</span>, <span class="string">"skill.skillThree"</span>: <span class="number">1</span>, <span class="attr">_id</span>: <span class="number">0</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="find在js文本中的使用"><a href="#find在js文本中的使用" class="headerlink" title="find在js文本中的使用"></a>find在js文本中的使用</h4><p>使用find进行查询也可以像之前使用update操作一样，将语句写在一个js文件中，然后通过load方法执行该js文件即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = connect(<span class="string">'company'</span>);</span><br><span class="line"><span class="keyword">var</span> result = db.workmate.find();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(result.hasNext()) &#123;</span><br><span class="line">    printjson(result.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印查询到的所有记录</span></span><br></pre></td></tr></table></figure><p>除了使用while循环，也可以使用forEach，更加方便优雅。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = connect(<span class="string">'company'</span>);</span><br><span class="line"><span class="keyword">var</span> result = db.workmate.find();</span><br><span class="line"></span><br><span class="line">result.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    printjson(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mongo学习笔记（二）</title>
      <link href="undefined2018/02/21/mongo%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <content type="html"><![CDATA[<p><img src="http://p4y9hsn68.bkt.clouddn.com/mongodb.png" alt="学习mongoDB更新操作 | 900*0"></p><p>学习mongoDB的修改(update)操作。<br><a id="more"></a></p><p>昨晚跟朋友出去浪了，没有继续学习，只能今天学习然后更下博客啦。</p><p>今天照着<a href="http://jspang.com/2017/12/16/mongdb/#08update" target="_blank" rel="noopener">技术胖的博客</a>继续学习了mongoDB的更新操作。</p><p>首先先把例子前提搭好：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> workmate =&#123; </span><br><span class="line">    name:<span class="string">'Mike'</span>,</span><br><span class="line">    age:<span class="number">20</span>,</span><br><span class="line">    sex:<span class="number">1</span>,</span><br><span class="line">    job:<span class="string">'UI设计'</span>,</span><br><span class="line">    skill:&#123;</span><br><span class="line">        skillOne:<span class="string">'PhotoShop'</span>,</span><br><span class="line">        SkillTwo:<span class="string">'UI'</span>,</span><br><span class="line">        SkillThree:<span class="string">'Word+Excel+PPT'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    regeditTime:<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> db = connect(<span class="string">'company'</span>);</span><br><span class="line"><span class="comment">//创建company数据库</span></span><br><span class="line">db.workmate.insert(workmate);</span><br><span class="line"><span class="comment">//新建workmate集合</span></span><br></pre></td></tr></table></figure></p><h5 id="set修改器"><a href="#set修改器" class="headerlink" title="$set修改器"></a>$set修改器</h5><p>用来修改一个指定的键值(key)。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.workmate.update(&#123;<span class="attr">name</span>: <span class="string">"Mike"</span>&#125;, &#123;<span class="attr">$set</span>:&#123;<span class="attr">age</span>:<span class="number">22</span>&#125;&#125;);</span><br></pre></td></tr></table></figure></p><p>而对于文档内嵌文档的修改方式。使用点操作符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.workmate.update(&#123;<span class="attr">name</span>: <span class="string">"Mike"</span>&#125;, &#123;<span class="attr">$set</span>: &#123;<span class="string">"skill.SkillThree"</span>: <span class="string">"word"</span>&#125;&#125;);</span><br></pre></td></tr></table></figure><h5 id="unset修改器"><a href="#unset修改器" class="headerlink" title="$unset修改器"></a>$unset修改器</h5><p>用于删除指定的key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.workmate.update(&#123;<span class="attr">name</span>: <span class="string">"Mike"</span>&#125;, &#123;<span class="attr">$unset</span>: &#123;<span class="attr">age</span>: <span class="string">''</span>&#125;&#125;);</span><br></pre></td></tr></table></figure><h5 id="inc修改器"><a href="#inc修改器" class="headerlink" title="$inc修改器"></a>$inc修改器</h5><p>对数据进行修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.workmate.update(&#123;<span class="attr">name</span>: <span class="string">"Mike"</span>&#125;, &#123;<span class="attr">$inc</span>: &#123;<span class="attr">age</span>: <span class="number">-2</span>&#125;&#125;);</span><br><span class="line"><span class="comment">//直接减2得到想要的数字。这里想要得到18，而原本是20</span></span><br></pre></td></tr></table></figure><h5 id="multi"><a href="#multi" class="headerlink" title="multi"></a>multi</h5><p>为所有的数据都添加上一个字段。设置<code>multi</code>为<code>true</code>，否则只为第一个数据增加了字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.workmate.update(&#123;&#125;, &#123;<span class="attr">$set</span>: &#123;<span class="attr">interest</span>: []&#125;&#125;, &#123;<span class="attr">multi</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure><p>此时所有数据都添加上了<code>interest</code>这个字段。</p><h5 id="upsert"><a href="#upsert" class="headerlink" title="upsert"></a>upsert</h5><p>当需要新增数据时，<strong>upsert</strong>在找不到值的情况下，可以直接插入这条数据。设置<code>upsert</code>为<code>true</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.workmate.update(&#123;<span class="attr">name</span>: <span class="string">"John"</span>&#125;, &#123;<span class="attr">$set</span>: &#123;<span class="attr">age</span>: <span class="number">20</span>&#125;&#125;, &#123;<span class="attr">upsert</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure><p>运行结果显示，新增了<code>John</code>这一行数据。</p><h5 id="push"><a href="#push" class="headerlink" title="$push"></a>$push</h5><p>用于操作数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.workmate.update(&#123;<span class="attr">name</span>: <span class="string">"John"</span>&#125;, &#123;<span class="attr">$push</span>: &#123;<span class="attr">interest</span>: <span class="string">'draw'</span>&#125;&#125;);</span><br><span class="line"><span class="comment">//为interest数组新增了'draw'的元素</span></span><br></pre></td></tr></table></figure><h5 id="ne"><a href="#ne" class="headerlink" title="$ne"></a>$ne</h5><p><strong>$ne</strong>主要的作用是，检查一个值是否存在，如果不存在再执行操作，存在就不执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.workmate.update(&#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">interest</span>: &#123; <span class="attr">$ne</span>: <span class="string">"playGame"</span> &#125; &#125;, &#123; <span class="attr">$push</span>: &#123; <span class="attr">interest</span>: <span class="string">"Game"</span> &#125; &#125;);</span><br><span class="line"><span class="comment">//如果interest中有playGame，则不添加Game。否则添加</span></span><br></pre></td></tr></table></figure><h5 id="addToSet"><a href="#addToSet" class="headerlink" title="$addToSet"></a>$addToSet</h5><p>查找是否存在，不存在就push上去。相比<strong>$ne</strong>更容易理解。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.workmate.update(&#123; <span class="attr">name</span>: <span class="string">"John"</span> &#125;, &#123; <span class="attr">$addToSet</span>: &#123; <span class="attr">interest</span>: <span class="string">"readBook"</span> &#125; &#125;)</span><br><span class="line"><span class="comment">//interest数组中不存在'readBook'，则将'readBook'添加上</span></span><br></pre></td></tr></table></figure><h5 id="each修改器"><a href="#each修改器" class="headerlink" title="$each修改器"></a>$each修改器</h5><p>它可以传入一个数组，一次增加多个值进去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newInterset = [<span class="string">"Sing"</span>, <span class="string">"Dance"</span>, <span class="string">"Code"</span>];</span><br><span class="line">db.workmate.update(&#123; <span class="attr">name</span>: <span class="string">"John"</span> &#125;, &#123; <span class="attr">$addToSet</span>: &#123; <span class="attr">interest</span>: &#123; <span class="attr">$each</span>: newInterset &#125; &#125; &#125;)</span><br></pre></td></tr></table></figure><h5 id="pop"><a href="#pop" class="headerlink" title="$pop"></a>$pop</h5><p>用于删除数组值。</p><blockquote><p><strong>$pop</strong>只删除一次，并不是删除所有数组中的值。而且它有两个选项，一个是1和-1。<br>    <strong>1</strong>：从数组<strong>尾部</strong>进行删除<br>    <strong>-1</strong>：从数组<strong>头部</strong>进行删除</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.workmate.update(&#123; <span class="attr">name</span>: <span class="string">'John'</span> &#125;, &#123; <span class="attr">$pop</span>: &#123; <span class="attr">interest</span>: <span class="number">1</span> &#125; &#125;)</span><br></pre></td></tr></table></figure><p>接下来看一点高级的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.workmate.update(&#123;<span class="attr">sex</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">$set</span>: &#123;<span class="attr">money</span>: <span class="number">1000</span>&#125;&#125;, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//上面一句等同于这一句：db.workmate.update(&#123;sex: 1&#125;, &#123;$set: &#123;money: 1000&#125;&#125;, &#123;upsert: false&#125;, &#123;multi: true&#125;);</span></span><br></pre></td></tr></table></figure></p><p>与之有异曲同工之妙的如下语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myModify = &#123;</span><br><span class="line">    findAndModify: <span class="string">'workmate'</span>,<span class="comment">//需要查找或修改的集合</span></span><br><span class="line">    query: <span class="string">'Mike'</span>,<span class="comment">//指定哪条数据</span></span><br><span class="line">    update: &#123;<span class="attr">$set</span>: &#123;<span class="attr">age</span>: <span class="number">29</span>&#125;&#125;,<span class="comment">//进行修改</span></span><br><span class="line">    <span class="keyword">new</span>: <span class="literal">true</span> <span class="comment">//返回更新前的文档(false)还是更新后的文档(true)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resultMessage = db.runCommand(myModify);<span class="comment">//使用runCommand来执行语句</span></span><br><span class="line">printjson(resultMessage);<span class="comment">//以json形式打印结果</span></span><br></pre></td></tr></table></figure><blockquote><p>runCommand可以执行数据库操作的语句</p></blockquote><p><strong>两者都是执行更新操作，但是后者的安全性能相对较高，更加值得学习。</strong></p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mongo学习笔记(一)</title>
      <link href="undefined2018/02/20/mongo%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <content type="html"><![CDATA[<p><img src="http://p4y9hsn68.bkt.clouddn.com/u=4087144538,2526729501&amp;fm=27&amp;gp=0.jpg" alt="mongoDB学习笔记"></p><p>开始学习mongoDB。<br><a id="more"></a></p><h4 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h4><blockquote><p>MongoDB是一个基于分布式文件存储的数据库，由C++语言编写。目的是为WEB应用提供扩展的高性能的数据存储解决方案。MongoDB是一个介于关系型数据库和非关系型数据库之间的产品，是非关系型数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p></blockquote><h4 id="开始安装MongoDB"><a href="#开始安装MongoDB" class="headerlink" title="开始安装MongoDB"></a>开始安装MongoDB</h4><h5 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h5><ol><li>去官网下载<strong>MongoDB</strong>，<a href="https://www.mongodb.com/" target="_blank" rel="noopener">https://www.mongodb.com/</a>，在网站中找到Download按钮进行下载。</li><li>下载后进行安装，默认配置一直安装下去就可以了。</li><li>安装完成后，需要配置“环境变量”，目的是再命令行中直接使用，而不需要输入很长的路径。</li></ol><h4 id="运行MongoDB服务端"><a href="#运行MongoDB服务端" class="headerlink" title="运行MongoDB服务端"></a>运行MongoDB服务端</h4><p>安装好MongoDB数据库后，我们需要启用服务端才能使用。启用服务的命令是<code>mongod</code>。<br>打开命令行，执行<code>mongod</code>。在命令中直接输入<code>mongod</code>，但是你会发现服务并没有启动，报了一个exception，服务停止了。这是因为我们需要在安装盘的根目录，建立data/db,这两个mongodb需要文件夹。<br>新建所需文件夹之后再次运行<code>mongod</code>，这时候服务就可以开启了，链接默认端口是<strong>27017</strong>。</p><h4 id="链接MongoDB服务端"><a href="#链接MongoDB服务端" class="headerlink" title="链接MongoDB服务端"></a>链接MongoDB服务端</h4><p>开启MongoDB服务器之后，我们需要进行链接。命令行操作为<code>mongo</code>。</p><h4 id="一些常用的mongo基本命令"><a href="#一些常用的mongo基本命令" class="headerlink" title="一些常用的mongo基本命令"></a>一些常用的mongo基本命令</h4><p>我们都知道关系型的数据库，如mysql，oracle等都是采用SQL语句进行数据库增删查改的。而非关系型数据库中的佼佼者MongoDB则采用前端人员熟知的JavaScript语言进行数据库操作。<br>可以来一段代码看看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tobee</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"welcome to tobee's blog"</span>;</span><br><span class="line">&#125;</span><br><span class="line">print(tobee()); <span class="comment">//使用print进行打印而不能再使用console.log</span></span><br></pre></td></tr></table></figure><h5 id="一些基础命令"><a href="#一些基础命令" class="headerlink" title="一些基础命令"></a>一些基础命令</h5><p><code>show dbs</code>  ——  查看存在的数据库。原始存在<strong>admin</strong>和<strong>local</strong>两个数据库<br><code>db.version()</code>  ——  查看数据库版本<br><code>db</code>  ——  显示当前使用的数据库的名称<br><code>use XXX</code>   ——  切换至某个数据库（若没有，则新建）<br><code>show collection</code>  ——  查看数据库的集合<br><code>db.集合.insert()</code>  ——  新建数据集合和插入文件。如<code>db.user.insert({&quot;name&quot;:&quot;tobee&quot;})</code><br><code>db.集合.find()</code>  ——  查询所有数据<br><code>db.集合.update({查询条件}，{修改条件})</code>  ——  修改文件数据<br><code>db.集合.remove(条件)</code> ——  删除文件数据。如<code>db.user.remove({&quot;name&quot;:&quot;tobee&quot;})</code></p><h4 id="用js文件写mongo命令"><a href="#用js文件写mongo命令" class="headerlink" title="用js文件写mongo命令"></a>用js文件写mongo命令</h4><p>我们如果在命令行对我们数据库中的文件增删查改的话，会发现操作起来十分麻烦。这时候我们可以将需要操作的命令全部写在一个js文件中，再用mongo命令执行就可以了。</p><ul><li>新建test.js，在其中新建一个数据库</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = connect(<span class="string">"user"</span>); <span class="comment">//有则连接，没有则创建</span></span><br></pre></td></tr></table></figure><ul><li>终端执行命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo test.js</span><br></pre></td></tr></table></figure><p>此时js文件中的mongo命令会被执行。</p><p>今天下午就先学这些，巩固下。晚上再继续学继续更新。对了，我是在技术胖的博客上学习的，超棒，推荐给大家。<a href="http://jspang.com/2017/12/16/mongdb/" target="_blank" rel="noopener">http://jspang.com/2017/12/16/mongdb/</a></p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>重拾git</title>
      <link href="undefined2018/02/20/%E9%87%8D%E6%8B%BEgit/"/>
      <content type="html"><![CDATA[<p><img src="http://p4y9hsn68.bkt.clouddn.com/git.jpg" alt="git微教程"></p><p>来聊聊git。<br><a id="more"></a><br>从我接触<strong>git</strong>开始算起应该是有半年多的时间了，那时候需要帮学校朋友的一个小项目写一个移动端网页然后让大家可以访问，后来了解到GitHub page就可以做到无需购买域名和服务器就可以帮我们托管自己的网站。所以我开始学习git然后现在重新回想下记录下来。</p><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><blockquote><p>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds(Linux的发明者) 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p></blockquote><h4 id="一步一步来"><a href="#一步一步来" class="headerlink" title="一步一步来"></a>一步一步来</h4><ul><li>先登录GitHub，手动创建新仓库，并复制新的git地址</li><li>首先在目的目录下，右键进入<code>git bash</code></li><li><p>然后<code>git init</code>初始化，让文件夹变成git可管理的仓库<br><code>git add</code>文件名 ：将指定文件上传至暂存区<br><code>git commit -m 相关信息</code> ：将暂存区内容提交到主分支上<br>此时若是第一次使用git上传文件，会提示进行相关内容的配置<br><code>git config --global user.email &quot;your @example.com&quot;</code><br><code>git config --global user.name &quot;your name&quot;</code><br><code>git remote rm origin</code><br><code>git remote add origin &quot;git地址&quot;</code>：将分支与远程仓库地址进行关联<br><code>git push -u origin master</code> ：将本地仓库文件提交到远程仓库</p></li><li><p>此时若发现没有权限，需要公钥</p><ul><li><code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code> (一路回车)</li><li>在<code>GitHub</code>的<code>setting</code>界面左边点选<code>SSH and GPG keys</code>，右上角选<code>News SSH key</code></li><li>打开<code>c:/user/administer/.ssh/</code>目录(因人而异哦)，打开<code>id_rsa.pub</code>文件，将其复制到<code>GitHub</code>的<code>key</code>中，<code>title</code>任意输入<br>此时可以开始提交文件至远程仓库，即<code>git push -u origin master</code></li></ul></li><li><p>git clone git地址 ：git克隆项目</p></li></ul><h4 id="一些错误解决方法"><a href="#一些错误解决方法" class="headerlink" title="一些错误解决方法"></a>一些错误解决方法</h4><ol><li>提示出错信息：<code>fatal: remote origin already exists</code><br>输入<code>git remote rm origin</code>，再输入<code>git remote add origin &quot;git地址&quot;</code>。或者直接push</li><li>当远程仓库有一些本地文件没有的文件时，也会报错。此时先全部pull下来，再重新push上去</li></ol><p>更多的git教程可参考廖雪峰的官方教程→<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a></p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>杂想</title>
      <link href="undefined2018/02/19/%E6%9D%82%E6%83%B3/"/>
      <content type="html"><![CDATA[<p>大年初四。just try it<br><a id="more"></a><br>今天花了一个下午还有晚上的时间利用hexo和GitHub page搭建了属于自己的博客并对其做了个性化的DIY，同时也进行了前两篇博客的撰写，之后可能要买个域名将其解析到GitHub page上。接下来，我会将以前在没有博客的时候总结的一些学习上的坑都用博客的方式重新记录下来，勉励自己，同时也希望帮到别人，哪怕一个人。而且接下来的学习生涯也会在博客上留下我的足迹。</p><p>祝大家新年快乐。</p>]]></content>
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>对hexo中Next主题的DIY</title>
      <link href="undefined2018/02/19/%E5%AF%B9hexo%E4%B8%ADNext%E4%B8%BB%E9%A2%98%E7%9A%84DIY/"/>
      <content type="html"><![CDATA[<p><img src="http://img.cduyzh.com/images/hexo-pages3.jpg" alt="DIY Next主题"></p><p>总要有点追求，年轻人。<br><a id="more"></a><br>在搭建好了自己的博客之后，发现网上有很多大神都自己DIY了这个<strong>Next</strong>主题。于是我翻阅了好几篇文章还有<strong>Hexo</strong>和<strong>Next</strong>的官方文档之后，开始着手进行这个主题的DIY。</p><h4 id="文章主页添加阴影"><a href="#文章主页添加阴影" class="headerlink" title="文章主页添加阴影"></a>文章主页添加阴影</h4><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>，向里面加入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 203, .5);</span><br><span class="line">  <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 204, .5);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="在右上角或者左上角实现fork-me-on-github"><a href="#在右上角或者左上角实现fork-me-on-github" class="headerlink" title="在右上角或者左上角实现fork me on github"></a>在右上角或者左上角实现fork me on github</h4><p>→<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">字母版</a><br>→<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">图案版</a><br>挑选自己喜欢的样式，并复制代码。然后粘贴刚才复制的代码到<code>themes/next/layout/_layout.swig</code>文件中(放在<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>的下面)，并把<code>href</code>改为你的github地址。</p><h4 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h4><p>如果next主题在5.1.1以上的话就可以简单点设置，直接在主题配置文件<code>_config.yml</code>中找到<code>canvas_nest: false</code>或者<code>three_waves:false</code>，把它相应改为true就行了（注意分号后面要加一个空格）。</p><h4 id="实现点击界面出现桃心效果"><a href="#实现点击界面出现桃心效果" class="headerlink" title="实现点击界面出现桃心效果"></a>实现点击界面出现桃心效果</h4><p>在网址输入如下<br><code>http://7u2ss1.com1.z0.glb.clouddn.com/love.js</code><br>然后将里面的代码copy一下，新建<code>love.js</code>文件并且将代码复制进去，然后保存。将<code>love.js</code>文件放到路径<code>/themes/next/source/js/src</code>里面，然后打开<code>\themes\next\layout\_layout.swig</code>文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/love.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h4 id="在网站底部加上访问量"><a href="#在网站底部加上访问量" class="headerlink" title="在网站底部加上访问量"></a>在网站底部加上访问量</h4><p>打开主题配置文件<code>\themes\next\_config.yml</code>，在其中找到<code>busuanzi_count</code>，将参数<code>enable</code>改为<code>true</code>。接着在文件<code>\themes\next\layout\_partials\footer.swig</code>中的合适位置上加上如下参考代码，<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user-md"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">  本站访客数:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="网站底部字数统计"><a href="#网站底部字数统计" class="headerlink" title="网站底部字数统计"></a>网站底部字数统计</h4><p>在命令行使用npm安装hexo-wordcount<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></p><p>然后在<code>/themes/next/layout/_partials/footer.swig</code>文件尾部加上：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"theme-info"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>博客全站共&#123;&#123; totalcount(site) &#125;&#125;字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="实现统计功能"><a href="#实现统计功能" class="headerlink" title="实现统计功能"></a>实现统计功能</h4><p>在命令行使用npm安装hexo-wordcount<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></p><p> 然后在主题的配置文件<code>_config.yml</code>中，配置如下：</p><blockquote><p><code># Post wordcount display settings</code><br><code># Dependencies: https://github.com/willin/hexo-wordcount</code><br>post_wordcount:<br>  item_text: true<br>  wordcount: true<br>  min2read: true</p></blockquote><h4 id="参考来源（感谢-）"><a href="#参考来源（感谢-）" class="headerlink" title="参考来源（感谢~）"></a>参考来源（感谢~）</h4><p><a href="http://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">http://blog.csdn.net/qq_33699981/article/details/72716951</a><br><a href="http://www.cduyzh.com/hexo-settings-4/" target="_blank" rel="noopener">http://www.cduyzh.com/hexo-settings-4/</a></p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>遇见hexo</title>
      <link href="undefined2018/02/19/%E9%81%87%E8%A7%81hexo/"/>
      <content type="html"><![CDATA[<p><img src="http://p4y9hsn68.bkt.clouddn.com/v2-d4c1239e75c02e8482c22017a6c8d407_r.jpg" alt="github page与hexo搭建博客"></p><p>一篇水水的技术分享。大佬勿喷<br><a id="more"></a><br>大概很久之前就想拥有属于自己的博客了，自己是想完全靠自己搭建一个包括网站源代码，域名服务器购买，网站备案都由自己搞定，但是总是没时间后来就忘记了。之后听说<strong>Hexo</strong>可以帮我们搭建属于自己的博客而且也没有其他现有博客那么多限制，可以自己DIY。于是我就跟着<strong>hexo</strong>官方文档还有<strong>Next</strong>主题的官方文档一步一步搭建起现在的这个博客。接下来分享一些搭建时候的心路历程。</p><h4 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h4><blockquote><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。这里我选用的是GitHub。如果想要更加全面的了解Hexo，可以到其官网了解更多的细节。</p></blockquote><h4 id="下载node，git"><a href="#下载node，git" class="headerlink" title="下载node，git"></a>下载node，git</h4><p>在下载git的过程中不要点击“仅仅使用git bash”，点击“与Windows命令行结合”，<strong>本人遇到的坑就在这里</strong>，使用命令行输入稍后将要输入的命令<code>hexo d</code>进行部署的时候报了错，需要在git bash输入这句语句才有效。</p><h4 id="GitHub-page的配置"><a href="#GitHub-page的配置" class="headerlink" title="GitHub page的配置"></a>GitHub page的配置</h4><p>去到GitHub新增一个仓库，名字跟用户名一样，如“yourname.github.io”。</p><h4 id="用SSH-keys关联Hexo与Github-Pages"><a href="#用SSH-keys关联Hexo与Github-Pages" class="headerlink" title="用SSH keys关联Hexo与Github Pages"></a>用SSH keys关联Hexo与Github Pages</h4><p>在git bash中输入语句<code>ssh-keygen -t rsa -C &quot;注册Git的邮箱地址&quot;</code>。<br>接着会生成一个密钥，去到存放这个密钥的文件夹中找到id_rsa.pub，如“C:\Users\Administrator.ssh”，将其中内容复制粘贴到<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a> 的 new SSH key中。接着输入<code>ssh -T git@github.com</code>查看是否设置成功。</p><h4 id="新建文件夹放置博客内容"><a href="#新建文件夹放置博客内容" class="headerlink" title="新建文件夹放置博客内容"></a>新建文件夹放置博客内容</h4><p>在命令行使用npm安装hexo，步骤如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></p><p>此时在浏览器中打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以浏览博客了。</p><h4 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h4><p>在_config.yml文件中，找到Deployment，然后按照如下修改：</p><blockquote><p><code># Deployment</code><br><code>## Docs:https://hexo.io/docs/deployment.html</code><br>deploy:<br>  type: git<br>  repo: git@github.com:yourname/yourname.github.io.git<br>  branch: master</p></blockquote><h4 id="本地文件提交到Git-Pages"><a href="#本地文件提交到Git-Pages" class="headerlink" title="本地文件提交到Git Pages"></a>本地文件提交到Git Pages</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 删除旧的 public 文件</span><br><span class="line">hexo clean</span><br><span class="line">// 生成新的 public 文件</span><br><span class="line">hexo generate</span><br><span class="line">或者</span><br><span class="line">hexo g</span><br><span class="line">// 开始部署</span><br><span class="line">hexo deploye</span><br><span class="line">或者</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>需要安装一个扩展<br> <code>npm install hexo-deployer-git --save</code><br>然后在浏览器中输入 https:/yourname.github.io （用户名改成你的）看到了 Hexo 与 GitHub Pages 已经成功关联了。至此博客就算搞定啦~</p><h4 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h4><p><a href="https://segmentfault.com/a/1190000012008319" target="_blank" rel="noopener">即将成为史上最具用户体验的Hexo+GitHub Pages搭建博客的教程</a></p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
